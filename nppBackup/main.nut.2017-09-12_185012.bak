import("pathfinder.road", "RoadPathFinder", 3);

class ZumAI extends AIController 
{
  function Start();
}

function ZumAI::Start()
{
  if (!AICompany.SetName("ZumAI")) {
    local i = 2;
    while (!AICompany.SetName("ZumAI #" + i)) {
      i = i + 1;
    }
  }
  while (true) {
    AILog.Info("I am a very new AI with a ticker called ZumAI and I am at tick " + this.GetTick());
    this.Sleep(1);
	
	local pathfinder = RoadPathFinder();
	AIRoad.SetCurrentRoadType(AIRoad.ROADTYPE_ROAD);
	
	pathfinder.InitializePath([1,1], [10,10]);
	
	local path = false;
	while (path == false) {
	  path = pathfinder.FindPath(100);
	  AIController.Sleep(1);
	}
	
	while (path != null) {
	  local par = path.GetParent();
	  if (par != null) {
		local last_node = path.GetTile();
		if (AIMap.DistanceManhattan(path.GetTile(), par.GetTile()) == 1 ) {
		  if (!AIRoad.BuildRoad(path.GetTile(), par.GetTile())) {
			/* An error occurred while building a piece of road. TODO: handle it. 
			 * Note that this could mean the road was already built. */
		  }
		} else {
		  /* Build a bridge or tunnel. */
		  if (!AIBridge.IsBridgeTile(path.GetTile()) && !AITunnel.IsTunnelTile(path.GetTile())) {
			/* If it was a road tile, demolish it first. Do this to work around expended roadbits. */
			if (AIRoad.IsRoadTile(path.GetTile())) AITile.DemolishTile(path.GetTile());
			if (AITunnel.GetOtherTunnelEnd(path.GetTile()) == par.GetTile()) {
			  if (!AITunnel.BuildTunnel(AIVehicle.VT_ROAD, path.GetTile())) {
				/* An error occured while building a tunnel. TODO: handle it. */
			  }
			} else {
			  local bridge_list = AIBridgeList_Length(AIMap.DistanceManhattan(path.GetTile(), par.GetTile()) + 1);
			  bridge_list.Valuate(AIBridge.GetMaxSpeed);
			  bridge_list.Sort(AIList.SORT_BY_VALUE, false);
			  if (!AIBridge.BuildBridge(AIVehicle.VT_ROAD, bridge_list.Begin(), path.GetTile(), par.GetTile())) {
				/* An error occured while building a bridge. TODO: handle it. */
			  }
			}
		  }
		}
	  }
	  path = par;
	}
	
	  while (AIEventController.IsEventWaiting()) {
	  local e = AIEventController.GetNextEvent();
	  switch (e.GetEventType()) {
		case AIEvent.AI_ET_VEHICLE_CRASHED:
		  local ec = AIEventVehicleCrashed.Convert(e);
		  local v  = ec.GetVehicleID();
		  AILog.Info("We have a crashed vehicle (" + v + ")");
		  /* Handle the crashed vehicle */
		  break;
		}
	  }  
  }
}