import("pathfinder.road", "RoadPathFinder", 4);

class ZumAI extends AIController 
{
  constructor()
  {
    counter = 0;
  }

  counter = null;
}

function ZumAI::Start()
{
  if (!AICompany.SetName("ZumAI")) {
    local i = 2;
    while (!AICompany.SetName("ZumAI #" + i)) {
      i = i + 1;
    }
  }
  findAndBuildRoad();
  while (true) {
    AILog.Info("I am a very new AI with a ticker called ZumAI and I am at tick " + this.GetTick());
    this.Sleep(1);
  
	  while (AIEventController.IsEventWaiting()) {
	  local e = AIEventController.GetNextEvent();
	  switch (e.GetEventType()) {
		case AIEvent.AI_ET_VEHICLE_CRASHED:
		  local ec = AIEventVehicleCrashed.Convert(e);
		  local v  = ec.GetVehicleID();
		  AILog.Info("We have a crashed vehicle (" + v + ")");
		  /* Handle the crashed vehicle */
		  break;
		}
	  }  
  }
}

function findAndBuildRoad(){
  /* Get a list of all towns on the map. */
  local townlist = AITownList();

  /* Sort the list by population, highest population first. */
  townlist.Valuate(AITown.GetPopulation);
  townlist.Sort(AIAbstractList.SORT_BY_VALUE, false);

  /* Pick the two towns with the highest population. */
  local townid_a = townlist.Begin();
  local townid_b = townlist.Next();

  /* Print the names of the towns we'll try to connect. */
  AILog.Info("Going to connect " + AITown.GetName(townid_a) + " to " + AITown.GetName(townid_b));

  /* Tell OpenTTD we want to build normal road (no tram tracks). */
  AIRoad.SetCurrentRoadType(AIRoad.ROADTYPE_ROAD);

  /* Create an instance of the pathfinder. */
  local pathfinder = RoadPathFinder();

  /* Set the cost for making a turn extreme high. */
  pathfinder.cost.turn = 5000;

  /* Give the source and goal tiles to the pathfinder. */
  pathfinder.InitializePath([AITown.GetLocation(townid_a)], [AITown.GetLocation(townid_b)]);

  /* Try to find a path. */
  local path = false;
  while (path == false) {
    path = pathfinder.FindPath(100);
    this.Sleep(1);
  }

  if (path == null) {
    /* No path was found. */
    AILog.Error("pathfinder.FindPath return null");
  }

  local firstTile = path.GetTile();
  local firstTileNext = path.GetParent().GetTile();
  local lastTile = null;
  local lastTileNext = null;
  local depoBuilt = 0;
  local i=0;
  
  /* If a path was found, build a road over it. */
  while (path != null) {
    local par = path.GetParent();
	
    if (par != null) {
      lastTile = path.GetTile();
	  AIRoad.BuildRoadDepot(lastTile - AIMap.GetTileIndex(1,0), lastTile - AIMap.GetTileIndex(1,0));
	  if(i>5 && !depoBuilt && AIRoad.BuildRoadDepot(lastTile, lastTile - AIMap.GetTileIndex(1,0))){
	  AILog.Info("Depo was built !");
	  //depoBuilt = 1;
	  }
	  
      if (AIMap.DistanceManhattan(path.GetTile(), par.GetTile()) == 1 ) {
        if (!AIRoad.BuildRoad(path.GetTile(), par.GetTile())) {
          /* An error occured while building a piece of road. TODO: handle it. 
           * Note that is can also be the case that the road was already build. */
        }
      } else {
        /* Build a bridge or tunnel. */
        if (!AIBridge.IsBridgeTile(path.GetTile()) && !AITunnel.IsTunnelTile(path.GetTile())) {
          /* If it was a road tile, demolish it first. Do this to work around expended roadbits. */
          if (AIRoad.IsRoadTile(path.GetTile())) AITile.DemolishTile(path.GetTile());
          if (AITunnel.GetOtherTunnelEnd(path.GetTile()) == par.GetTile()) {
            if (!AITunnel.BuildTunnel(AIVehicle.VT_ROAD, path.GetTile())) {
              /* An error occured while building a tunnel. TODO: handle it. */
            }
          } else {
            local bridge_list = AIBridgeList_Length(AIMap.DistanceManhattan(path.GetTile(), par.GetTile()) + 1);
            bridge_list.Valuate(AIBridge.GetMaxSpeed);
            bridge_list.Sort(AIAbstractList.SORT_BY_VALUE, false);
            if (!AIBridge.BuildBridge(AIVehicle.VT_ROAD, bridge_list.Begin(), path.GetTile(), par.GetTile())) {
              /* An error occured while building a bridge. TODO: handle it. */
            }
          }
        }
      }
    }
	i++;
	lastTileNext = path.GetTile();
    path = par;
  }
  AILog.Info("Done");
  
  AITile.DemolishTile(firstTile);
  AITile.DemolishTile(lastTile);
  
  if (AIRoad.BuildDriveThroughRoadStation(firstTile, firstTileNext, AIRoad.ROADVEHTYPE_BUS, AIStation.STATION_NEW)) {
	AILog.Info("Station built in town!");
  } else {
	AILog.Info("Station not built in town!");
  }
  
  if (AIRoad.BuildDriveThroughRoadStation(lastTile, lastTileNext, AIRoad.ROADVEHTYPE_BUS, AIStation.STATION_NEW)) {
	AILog.Info("Station built in town!");
  } else {
	AILog.Info("Station not built in town!");
  }
}

function ZumAI::Save()
{
  local table = {counter_value = this.counter};
  return table;
}

function ZumAI::Load(version, data)
{
  if (data.rawin("counter_value")) {
    this.counter = data.rawget("counter_value");
  }
}